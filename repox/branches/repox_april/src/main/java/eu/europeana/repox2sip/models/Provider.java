/*
 * Copyright 2007 EDL FOUNDATION
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * you may not use this work except in compliance with the
 * Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */

package eu.europeana.repox2sip.models;

import eu.europeana.definitions.domain.Country;

import javax.persistence.*;
import java.io.Serializable;
import java.net.URL;
import java.util.List;

/**
 * This class contains the Provider's properties and is used to persist/retrieve it into/from the database system.
 *
 * @author Nicola Aloia   <nicola.aloia@isti.cnr.it>
 *         <p/>
 *         Date: 22-mar-2010
 *         Time: 15.42.40
 */

@Entity
public class Provider implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column
    private Long id = -1L;

    @ManyToOne(targetEntity = eu.europeana.repox2sip.models.Aggregator.class)
    @JoinColumn(name = "aggregator_id", nullable = false)
    private Aggregator aggregator;

    @Column(nullable = false, name = "provider_name")
    private String name;

    @Column(nullable = false, unique = true)
    private String nameCode;

    @Column
    private URL homePage;

    @Column(nullable = false)
    private Country country;

    @Column(nullable = false, name = "item_type")
    private ProviderType type;

    @Column(nullable = false, name = "repox_provider_id")
    private String repoxProviderId;

    @Column
    @Lob
    private String description;

    @OneToMany(targetEntity = DataSet.class, mappedBy = "provider", cascade = CascadeType.ALL)
    private List<DataSet> dataSets;

    /**
     * Get the List of DataSet belonging to this Provider instance.
     *
     * @return -  List<DataSet>
     * @see {@link DataSet}
     */
    public List<DataSet> getDataSets() {
        return dataSets;
    }

    /**
     * Set the List of DataSet belonging to this Provider instance.
     *
     * @param dataSets - List<DataSet>
     * @see {@link DataSet}
     */
    public void setDataSets(List<DataSet> dataSets) {
        this.dataSets = dataSets;
    }

    /**
     * Return the Provider's Aggregator.
     *
     * @return - Aggregator
     * @see {@link Aggregator}
     */


    public Aggregator getAggregator() {
        return aggregator;
    }

    /**
     * Set the Provider's Aggregator.
     *
     * @param aggregator - Aggregator
     * @see {@link Aggregator}
     */
    public void setAggregator(Aggregator aggregator) {
        this.aggregator = aggregator;

    }

    /**
     * Get the Provider's Country code.
     *
     * @return - Country
     * @see {@link Country}
     */
    public Country getCountry() {
        return country;
    }

    /**
     * Set the Provider's Country code.
     *
     * @param country - Country
     * @see {@link Country}
     */
    public void setCountry(Country country) {
        this.country = country;
    }

    /**
     * Get the Provider's type.
     *
     * @return - ProviderType
     * @see {@link ProviderType}
     */
    public ProviderType getType() {
        return type;
    }

    /**
     * Set the Provider's type.
     *
     * @param type - ProviderType
     * @see {@link ProviderType}
     */
    public void setType(ProviderType type) {
        this.type = type;
    }

    /**
     * Get the Identifier of the Provider.  The Identifier value is generated by the server side application. If
     * an error occurs on the server side (e.g. "Provider Already Exists"), the default value (-1L) is returned.
     *
     * @return - Long
     */
    public Long getId() {
        return id;
    }


    /**
     * Set the Identifier of the Provider. This method is used by the Server side application. A value set by the
     * client side application is ignored.
     *
     * @param id - Long
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the Name of the Provider
     *
     * @return - String
     */
    public String getName() {
        return name;
    }

    /**
     * Set the Name of the Provider
     *
     * @param name - String
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get the URL of the Provider's Home Page
     *
     * @return URL
     */
    public URL getHomePage() {
        return homePage;
    }

    /**
     * Set the URL of the Provider's Home Page
     *
     * @param homePage - URL
     */
    public void setHomePage(URL homePage) {
        this.homePage = homePage;
    }

    /**
     * Get the code associated to the Provider. The NameCode is used by the Europeana server side application
     * to generate a unique file identifier for harversted metadata.
     *
     * @return - String
     */
    public String getNameCode() {
        return nameCode;
    }

    /**
     * Set the code associated to the Provider. The NameCode is used by the Europeana server side application
     * to generate a unique file identifier for harversted metadata.
     *
     * @return - String
     */
    public void setNameCode(String nameCode) {
        this.nameCode = nameCode;
    }

    /**
     * Get the id generated by the Repox.
     *
     * @return String
     */
    public String getRepoxProviderId() {
        return repoxProviderId;
    }

    /**
     * Set the id generated by the Repox.
     *
     * @param repoxProviderId String
     */
    public void setRepoxProviderId(String repoxProviderId) {
        this.repoxProviderId = repoxProviderId;
    }

    /**
     * Get a String contains a short description of the provider.
     *
     * @return String
     */
    public String getDescription() {
        return description;
    }

    /**
     * Set a short description of the provider.
     *
     * @param description String
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Compare the given Provider ignoring the generated Identifier. Needed to avoid duplicated object
     *
     * @param o
     * @return boolean
     */
    public boolean equalsIgnoreId(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Provider)) {
            return false;
        }

        Provider provider = (Provider) o;

        if (aggregator != null ? !aggregator.equals(provider.aggregator) : provider.aggregator != null) {
            return false;
        }
        if (country != provider.country) {
            return false;
        }
        if (dataSets != null ? !dataSets.equals(provider.dataSets) : provider.dataSets != null) {
            return false;
        }
        if (description != null ? !description.equals(provider.description) : provider.description != null) {
            return false;
        }
        if (homePage != null ? !homePage.equals(provider.homePage) : provider.homePage != null) {
            return false;
        }
        if (name != null ? !name.equals(provider.name) : provider.name != null) {
            return false;
        }
        if (nameCode != null ? !nameCode.equals(provider.nameCode) : provider.nameCode != null) {
            return false;
        }
        if (repoxProviderId != null ? !repoxProviderId.equals(provider.repoxProviderId) : provider.repoxProviderId != null) {
            return false;
        }
        if (type != provider.type) {
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Provider)) {
            return false;
        }

        Provider provider = (Provider) o;

        if (aggregator != null ? !aggregator.equals(provider.aggregator) : provider.aggregator != null) {
            return false;
        }
        if (country != provider.country) {
            return false;
        }
        if (dataSets != null ? !dataSets.equals(provider.dataSets) : provider.dataSets != null) {
            return false;
        }
        if (description != null ? !description.equals(provider.description) : provider.description != null) {
            return false;
        }
        if (homePage != null ? !homePage.equals(provider.homePage) : provider.homePage != null) {
            return false;
        }
        if (id != null ? !id.equals(provider.id) : provider.id != null) {
            return false;
        }
        if (name != null ? !name.equals(provider.name) : provider.name != null) {
            return false;
        }
        if (nameCode != null ? !nameCode.equals(provider.nameCode) : provider.nameCode != null) {
            return false;
        }
        if (repoxProviderId != null ? !repoxProviderId.equals(provider.repoxProviderId) : provider.repoxProviderId != null) {
            return false;
        }
        if (type != provider.type) {
            return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (aggregator != null ? aggregator.hashCode() : 0);
        result = 31 * result + (name != null ? name.hashCode() : 0);
        result = 31 * result + (nameCode != null ? nameCode.hashCode() : 0);
        result = 31 * result + (homePage != null ? homePage.hashCode() : 0);
        result = 31 * result + (country != null ? country.hashCode() : 0);
        result = 31 * result + (type != null ? type.hashCode() : 0);
        result = 31 * result + (repoxProviderId != null ? repoxProviderId.hashCode() : 0);
        result = 31 * result + (description != null ? description.hashCode() : 0);
        result = 31 * result + (dataSets != null ? dataSets.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "Provider{" +
                "id=" + id +
                ", aggregator=" + aggregator +
                ", name='" + name + '\'' +
                ", nameCode='" + nameCode + '\'' +
                ", homePage=" + homePage +
                ", country=" + country +
                ", type=" + type +
                ", repoxProviderId='" + repoxProviderId + '\'' +
                ", description='" + description + '\'' +
                ", dataSets=" + dataSets +
                '}';
    }

}