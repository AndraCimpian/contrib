/*
 * Copyright 2007 EDL FOUNDATION
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * you may not use this work except in compliance with the
 * Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */

package eu.europeana.repox2sip.models;

import javax.persistence.*;
import java.io.Serializable;
import java.net.URL;
import java.util.List;

/**
 * This class contains the Aggregator's properties and is used to persist/retrieve into/from the database system.
 *
 * @author Nicola Aloia   <nicola.aloia@isti.cnr.it>
 *         <p/>
 *         Date: 22-mar-2010
 *         Time: 15.42.40
 */

@Entity
public class Aggregator implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column
    private Long id = -1L;

    @Column(nullable = false, name = "aggregator_name")
    private String name;

    @Column(nullable = false, unique = true)
    private String nameCode;

    @Column
    private URL homePage;

    @Column(nullable = false, name = "repox_aggregator_id")
    private String repoxAggregatorId;

    @OneToMany(targetEntity = Provider.class, mappedBy = "aggregator", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<Provider> providers;

    /**
     * Get the id generated by the Repox
     *
     * @return String
     */
    public String getRepoxAggregatorId() {
        return repoxAggregatorId;
    }

    /**
     * Set the id generated by the Repox
     *
     * @param repoxAggregatorId String
     */
    public void setRepoxAggregatorId(String repoxAggregatorId) {
        this.repoxAggregatorId = repoxAggregatorId;
    }

    /**
     * Get the List of Providers belonging to this Aggregator instance.
     *
     * @return -  List<Provider>
     * @see {@link Provider}
     */
    public List<Provider> getProviders() {
        return providers;
    }

    /**
     * Set the List of Providers belonging to this Aggregator instance.
     *
     * @param providers - List<Provider>
     * @see {@link Provider}
     */
    public void setProviders(List<Provider> providers) {
        this.providers = providers;
    }

    /**
     * Get the Identifier of the Aggregator. The Identifier value is generated by the server side application. If
     * an error occurs on the server side (e.g. "Aggregator Already Exists"), the default value (-1L) is returned.
     *
     * @return - Long
     */
    public Long getId() {
        return id;
    }


    /**
     * Set the Identifier of the Aggregator. This method is used by the Server side application. A value set by the
     * client side application is ignored.
     *
     * @param id - Long
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the Name of the Aggregator
     *
     * @return - String
     */
    public String getName() {
        return name;
    }

    /**
     * Set the Name of the Aggregator
     *
     * @param name - String
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get the URL of the Aggregator's Home Page
     *
     * @return URL
     */
    public URL getHomePage() {
        return homePage;
    }

    /**
     * Set the URL of the Aggregator's Home Page
     *
     * @param homePage - URL
     */
    public void setHomePage(URL homePage) {
        this.homePage = homePage;
    }

    /**
     * Get the code associated to the Aggregator. The NameCode is used by the Europeana server side application
     * to generate a unique file identifier for harversted metadata.
     *
     * @return - String
     */
    public String getNameCode() {
        return nameCode;
    }

    /**
     * Set the code associated to the Aggregator. The NameCode is used by the Europeana server side application
     * to generate a unique file identifier for harversted metadata.
     *
     * @return - String
     */
    public void setNameCode(String nameCode) {
        this.nameCode = nameCode;
    }

    /**
     * Compare the given Aggregator ignoring the generated Identifier. Needed to avoid duplicated object
     *
     * @param o
     * @return boolean
     */
    public boolean equalsIgnoreId(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Aggregator)) {
            return false;
        }

        Aggregator that = (Aggregator) o;

        if (homePage != null ? !homePage.equals(that.homePage) : that.homePage != null) {
            return false;
        }
        if (name != null ? !name.equals(that.name) : that.name != null) {
            return false;
        }
        if (nameCode != null ? !nameCode.equals(that.nameCode) : that.nameCode != null) {
            return false;
        }
        if (providers != null ? !providers.equals(that.providers) : that.providers != null) {
            return false;
        }
        if (repoxAggregatorId != null ? !repoxAggregatorId.equals(that.repoxAggregatorId) : that.repoxAggregatorId != null) {
            return false;
        }

        return true;
    }

    @Override
    public String toString() {
        return "Aggregator{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", nameCode='" + nameCode + '\'' +
                ", homePage=" + homePage +
                ", repoxAggregatorId='" + repoxAggregatorId + '\'' +
                ", providers=" + providers +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Aggregator)) {
            return false;
        }

        Aggregator that = (Aggregator) o;

        if (homePage != null ? !homePage.equals(that.homePage) : that.homePage != null) {
            return false;
        }
        if (id != null ? !id.equals(that.id) : that.id != null) {
            return false;
        }
        if (name != null ? !name.equals(that.name) : that.name != null) {
            return false;
        }
        if (nameCode != null ? !nameCode.equals(that.nameCode) : that.nameCode != null) {
            return false;
        }
        if (providers != null ? !providers.equals(that.providers) : that.providers != null) {
            return false;
        }
        if (repoxAggregatorId != null ? !repoxAggregatorId.equals(that.repoxAggregatorId) : that.repoxAggregatorId != null) {
            return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (name != null ? name.hashCode() : 0);
        result = 31 * result + (nameCode != null ? nameCode.hashCode() : 0);
        result = 31 * result + (homePage != null ? homePage.hashCode() : 0);
        result = 31 * result + (repoxAggregatorId != null ? repoxAggregatorId.hashCode() : 0);
        result = 31 * result + (providers != null ? providers.hashCode() : 0);
        return result;
    }
}
