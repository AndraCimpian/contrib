package pt.utl.ist.repox.data;import eu.europeana.repox2sip.Repox2Sip;import eu.europeana.repox2sip.Repox2SipException;import eu.europeana.repox2sip.models.Aggregator;import org.dom4j.DocumentException;import pt.utl.ist.repox.util.RepoxContextUtil;import org.apache.log4j.Logger;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.List;/** * Created by IntelliJ IDEA. * User: Emanuel * Date: 11/Abr/2010 * Time: 11:53:20 */public class AggregatorRepox {    private static final Logger log = Logger.getLogger(AggregatorRepox.class);    private String id;    private String name;    private String nameCode;    private URL homePage;    private List<DataProvider> dataProviders = new ArrayList<DataProvider>();    private Long idDb = -1L;    /**     * Get the Identifier of the AggregatorRepox. The Identifier value is generated by the server side application. If     * an error occurs on the server side (e.g. "AggregatorRepox Already Exists"), the default value (-1L) is returned.     *     * @return - Long     */    public String getId() {        return id;    }    /**     * Set the Identifier of the AggregatorRepox. This method is used by the Server side application. A value set by the     * client side application is ignored.     *     * @param id - Long     */    public void setId(String id) {        this.id = id;    }    /**     * Get the Name of the AggregatorRepox     *     * @return - String     */    public String getName() {        return name;    }    /**     * Set the Name of the AggregatorRepox     *     * @param name - String     */    public void setName(String name) {        this.name = name;    }    /**     * Get the code associated to the AggregatorRepox. The NameCode is used by the Europeana server side application     * to generate a unique file identifier for harversted metadata.     *     * @return - String     */    public String getNameCode() {        return nameCode;    }    /**     * Set the code associated to the AggregatorRepox. The NameCode is used by the Europeana server side application     * to generate a unique file identifier for harversted metadata.     *     * @return - String     */    public void setNameCode(String nameCode) {        this.nameCode = nameCode;    }    /**     * Get the URL of the AggregatorRepox's Home Page     *     * @return URL     */    public URL getHomePage() {        return homePage;    }    /**     * Set the URL of the AggregatorRepox's Home Page     *     * @param homePage - URL     */    public void setHomePage(URL homePage) {        this.homePage = homePage;    }    /**     * Get the database ID of the AggregatorRepox     *     * @return idDb     */    public Long getIdDb() {        return idDb;    }    /**     * Set the database ID of the AggregatorRepox     *     * @param idDb - URL     */    public void setIdDb(Long idDb) {        this.idDb = idDb;    }    /**     * Get the List of Providers belonging to this AggregatorRepox instance.     *     * @return -  List<DataProvider>     * @see {@link DataProvider}     */    public List<DataProvider> getDataProviders() {        return dataProviders;    }    /**     * Set the List of Providers belonging to this AggregatorRepox instance.     *     * @param dataProviders - List<DataProvider>     * @see {@link DataProvider}     */    public void setDataProviders(List<DataProvider> dataProviders)  {        this.dataProviders.addAll(dataProviders);    }    /**     * Add a Data Provider     *     * @param dataProvider - DataProvider     * @see {@link DataProvider}     */    public void addDataProvider(DataProvider dataProvider)  {        dataProviders.add(dataProvider);    }    /**     * Generate an Id for Aggregator     * @param name     * @return     * @throws DocumentException     * @throws IOException     */    public static String generateId(String name) throws DocumentException, IOException {        String generatedIdPrefix = "";        for (int i = 0; (i < name.length() && i < 32); i++) {            if((name.charAt(i) >= 'a' && name.charAt(i) <= 'z')                    || (name.charAt(i) >= 'A' && name.charAt(i) <= 'Z')) {                generatedIdPrefix += name.charAt(i);            }        }        generatedIdPrefix += "r";        return generatedIdPrefix + generateNumberSufix(generatedIdPrefix);    }    private static int generateNumberSufix(String basename) throws DocumentException, IOException {        int currentNumber = 0;        String currentFullId = basename + currentNumber;        while(RepoxContextUtil.getRepoxManager().getDataManager().getAggregator(currentFullId) != null) {            currentNumber++;            currentFullId = basename + currentNumber;        }        return currentNumber;    }    public AggregatorRepox() {    }    public AggregatorRepox(String id, String name, String nameCode, URL homePage, List<DataProvider> dataProviders, Long idDb) {        this.id = id;        this.name = name;        this.nameCode = nameCode;        this.homePage = homePage;        this.dataProviders = dataProviders;        this.idDb = idDb;    }    /**     * Create an Aggregator object, and add it to the database     * @param repox2sip     * @throws IOException     * @throws eu.europeana.repox2sip.Repox2SipException     */    public synchronized void addAggregator2Database(Repox2Sip repox2sip) throws Repox2SipException {        Aggregator aggregatorDb = new Aggregator();        aggregatorDb.setName(this.getName());        aggregatorDb.setHomePage(this.getHomePage());        aggregatorDb.setNameCode(this.getNameCode());        aggregatorDb.setRepoxAggregatorId(this.getId());        aggregatorDb = repox2sip.addAggregator(aggregatorDb);        this.setIdDb(aggregatorDb.getId());    }    /**     * Update the Aggregator in the database     * @param repox2sip     * @throws IOException     * @throws Repox2SipException     */    public synchronized void updateAggregator2Database(Repox2Sip repox2sip) throws IOException, Repox2SipException {        Aggregator aggregatorDb = repox2sip.getAggregator(this.getIdDb());        aggregatorDb.setName(this.getName());        aggregatorDb.setHomePage(this.getHomePage());        aggregatorDb.setNameCode(this.getNameCode());        aggregatorDb.setRepoxAggregatorId(this.getId());        repox2sip.updateAggregator(aggregatorDb);    }    /**     * Remove the Aggregator from the database     * @param repox2sip     * @throws IOException     * @throws Repox2SipException     */    public synchronized void deleteAggregatorFromDatabase(Repox2Sip repox2sip) throws IOException, Repox2SipException {        repox2sip.removeAggregator(repox2sip.getAggregator(this.getIdDb()));    }}